// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// AccountsDao is the data access object for table accounts.
type AccountsDao struct {
	table   string          // table is the underlying table name of the DAO.
	group   string          // group is the database configuration group name of current DAO.
	columns AccountsColumns // columns contains all the column names of Table for convenient usage.
}

// AccountsColumns defines and stores column names for table accounts.
type AccountsColumns struct {
	Id         string //
	Username   string // 用户名
	Password   string // 密码
	Role       string // 账号角色 0 - 超级管理员 1 - 管理员
	Status     string // 账号状态 ：  0 - 禁用       1 - 可用
	Createtime string // 创建时间
	Updatetime string // 更新时间
}

// accountsColumns holds the columns for table accounts.
var accountsColumns = AccountsColumns{
	Id:         "id",
	Username:   "username",
	Password:   "password",
	Role:       "role",
	Status:     "status",
	Createtime: "createtime",
	Updatetime: "updatetime",
}

// NewAccountsDao creates and returns a new DAO object for table data access.
func NewAccountsDao() *AccountsDao {
	return &AccountsDao{
		group:   "default",
		table:   "accounts",
		columns: accountsColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *AccountsDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *AccountsDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *AccountsDao) Columns() AccountsColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *AccountsDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *AccountsDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *AccountsDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
