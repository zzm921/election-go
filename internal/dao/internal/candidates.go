// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// CandidatesDao is the data access object for table candidates.
type CandidatesDao struct {
	table   string            // table is the underlying table name of the DAO.
	group   string            // group is the database configuration group name of current DAO.
	columns CandidatesColumns // columns contains all the column names of Table for convenient usage.
}

// CandidatesColumns defines and stores column names for table candidates.
type CandidatesColumns struct {
	Id           string //
	Name         string // 候选人名称
	Introduction string // 候选人简介
	Image        string // 候选人简介
	Status       string // 候选人状态 1 - 可用 0 - 不可用
	Createtime   string // 创建时间
	Updatetime   string // 更新时间
}

// candidatesColumns holds the columns for table candidates.
var candidatesColumns = CandidatesColumns{
	Id:           "id",
	Name:         "name",
	Introduction: "introduction",
	Image:        "image",
	Status:       "status",
	Createtime:   "createtime",
	Updatetime:   "updatetime",
}

// NewCandidatesDao creates and returns a new DAO object for table data access.
func NewCandidatesDao() *CandidatesDao {
	return &CandidatesDao{
		group:   "default",
		table:   "candidates",
		columns: candidatesColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *CandidatesDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *CandidatesDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *CandidatesDao) Columns() CandidatesColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *CandidatesDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *CandidatesDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *CandidatesDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
